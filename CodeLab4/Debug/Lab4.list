
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e48  08002e48  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e48  08002e48  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000001c  08002e6c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002e6c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000983c  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfb  00000000  00000000  00029881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd4  00000000  00000000  0002c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c19d  00000000  00000000  0004367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082576  00000000  00000000  0004f819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d1de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e0c 	.word	0x08002e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002e0c 	.word	0x08002e0c

0800014c <init_buffer>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonHold[NO_OF_BUTTONS];
//-------------------(đọc nút nhấn và chống nhiễu)------------------


void init_buffer() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e02a      	b.n	80001ae <init_buffer+0x62>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000158:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <init_buffer+0x74>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = BUTTON_IS_RELEASED;
 8000162:	4a18      	ldr	r2, [pc, #96]	; (80001c4 <init_buffer+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = BUTTON_IS_RELEASED;
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <init_buffer+0x7c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer3[i] = BUTTON_IS_RELEASED;
 8000176:	4a15      	ldr	r2, [pc, #84]	; (80001cc <init_buffer+0x80>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4413      	add	r3, r2
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000180:	4a13      	ldr	r2, [pc, #76]	; (80001d0 <init_buffer+0x84>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
		flagForButtonHold[i] = 0;
 800018a:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <init_buffer+0x88>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000194:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <init_buffer+0x8c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 800019e:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <init_buffer+0x90>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2100      	movs	r1, #0
 80001a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	ddd1      	ble.n	8000158 <init_buffer+0xc>
	}
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000038 	.word	0x20000038
 80001c4:	2000003c 	.word	0x2000003c
 80001c8:	20000040 	.word	0x20000040
 80001cc:	20000044 	.word	0x20000044
 80001d0:	20000048 	.word	0x20000048
 80001d4:	2000004c 	.word	0x2000004c
 80001d8:	20000050 	.word	0x20000050
 80001dc:	20000058 	.word	0x20000058

080001e0 <button_reading>:

void button_reading(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	e092      	b.n	8000312 <button_reading+0x132>
		debounceButtonBufer3[i] = debounceButtonBufer2[i];
 80001ec:	4a4d      	ldr	r2, [pc, #308]	; (8000324 <button_reading+0x144>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4413      	add	r3, r2
 80001f2:	7819      	ldrb	r1, [r3, #0]
 80001f4:	4a4c      	ldr	r2, [pc, #304]	; (8000328 <button_reading+0x148>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	460a      	mov	r2, r1
 80001fc:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = debounceButtonBufer1[i];
 80001fe:	4a4b      	ldr	r2, [pc, #300]	; (800032c <button_reading+0x14c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	7819      	ldrb	r1, [r3, #0]
 8000206:	4a47      	ldr	r2, [pc, #284]	; (8000324 <button_reading+0x144>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, (1U << i));
 8000210:	2201      	movs	r2, #1
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	fa02 f303 	lsl.w	r3, r2, r3
 8000218:	b29b      	uxth	r3, r3
 800021a:	4619      	mov	r1, r3
 800021c:	4844      	ldr	r0, [pc, #272]	; (8000330 <button_reading+0x150>)
 800021e:	f001 fdc9 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	4619      	mov	r1, r3
 8000226:	4a41      	ldr	r2, [pc, #260]	; (800032c <button_reading+0x14c>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBufer1[i] == debounceButtonBufer2[i] && debounceButtonBufer3[i] == debounceButtonBufer2[i])
 8000230:	4a3e      	ldr	r2, [pc, #248]	; (800032c <button_reading+0x14c>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	493a      	ldr	r1, [pc, #232]	; (8000324 <button_reading+0x144>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	440b      	add	r3, r1
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	d112      	bne.n	800026a <button_reading+0x8a>
 8000244:	4a38      	ldr	r2, [pc, #224]	; (8000328 <button_reading+0x148>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4935      	ldr	r1, [pc, #212]	; (8000324 <button_reading+0x144>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	440b      	add	r3, r1
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	429a      	cmp	r2, r3
 8000256:	d108      	bne.n	800026a <button_reading+0x8a>
			buttonBuffer[i] = debounceButtonBufer1[i];
 8000258:	4a34      	ldr	r2, [pc, #208]	; (800032c <button_reading+0x14c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	7819      	ldrb	r1, [r3, #0]
 8000260:	4a34      	ldr	r2, [pc, #208]	; (8000334 <button_reading+0x154>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	460a      	mov	r2, r1
 8000268:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <button_reading+0x154>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d136      	bne.n	80002e4 <button_reading+0x104>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000276:	4a30      	ldr	r2, [pc, #192]	; (8000338 <button_reading+0x158>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	2bc7      	cmp	r3, #199	; 0xc7
 8000280:	d80a      	bhi.n	8000298 <button_reading+0xb8>
				counterForButtonPress1s[i]++;
 8000282:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <button_reading+0x158>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028a:	3301      	adds	r3, #1
 800028c:	b299      	uxth	r1, r3
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <button_reading+0x158>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000296:	e039      	b.n	800030c <button_reading+0x12c>
			}
			else {
				flagForButtonPress1s[i] = 1;
 8000298:	4a28      	ldr	r2, [pc, #160]	; (800033c <button_reading+0x15c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
				//TO DO
				if (counterForButtonHold[i] < DURATION_FOR_HOLD) {
 80002a2:	4a27      	ldr	r2, [pc, #156]	; (8000340 <button_reading+0x160>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002aa:	2b31      	cmp	r3, #49	; 0x31
 80002ac:	d82e      	bhi.n	800030c <button_reading+0x12c>
					counterForButtonHold[i]++;
 80002ae:	4a24      	ldr	r2, [pc, #144]	; (8000340 <button_reading+0x160>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b6:	3301      	adds	r3, #1
 80002b8:	b299      	uxth	r1, r3
 80002ba:	4a21      	ldr	r2, [pc, #132]	; (8000340 <button_reading+0x160>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (counterForButtonHold[i] >= DURATION_FOR_HOLD) {
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <button_reading+0x160>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ca:	2b31      	cmp	r3, #49	; 0x31
 80002cc:	d91e      	bls.n	800030c <button_reading+0x12c>
						counterForButtonHold[i] = 0;
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <button_reading+0x160>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2100      	movs	r1, #0
 80002d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonHold[i] = 1;
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <button_reading+0x164>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4413      	add	r3, r2
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
 80002e2:	e013      	b.n	800030c <button_reading+0x12c>
					}
				}
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <button_reading+0x158>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2100      	movs	r1, #0
 80002ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80002ee:	4a13      	ldr	r2, [pc, #76]	; (800033c <button_reading+0x15c>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
			counterForButtonHold[i] = 0;
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <button_reading+0x160>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2100      	movs	r1, #0
 80002fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonHold[i] = 0;
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <button_reading+0x164>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b02      	cmp	r3, #2
 8000316:	f77f af69 	ble.w	80001ec <button_reading+0xc>
		}
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000040 	.word	0x20000040
 8000328:	20000044 	.word	0x20000044
 800032c:	2000003c 	.word	0x2000003c
 8000330:	40010c00 	.word	0x40010c00
 8000334:	20000038 	.word	0x20000038
 8000338:	20000050 	.word	0x20000050
 800033c:	20000048 	.word	0x20000048
 8000340:	20000058 	.word	0x20000058
 8000344:	2000004c 	.word	0x2000004c

08000348 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d901      	bls.n	800035c <is_button_pressed+0x14>
 8000358:	2300      	movs	r3, #0
 800035a:	e007      	b.n	800036c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <is_button_pressed+0x30>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	bf0c      	ite	eq
 8000366:	2301      	moveq	r3, #1
 8000368:	2300      	movne	r3, #0
 800036a:	b2db      	uxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000038 	.word	0x20000038

0800037c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d901      	bls.n	8000390 <is_button_pressed_1s+0x14>
 800038c:	2300      	movs	r3, #0
 800038e:	e007      	b.n	80003a0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <is_button_pressed_1s+0x30>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	2b01      	cmp	r3, #1
 8000398:	bf0c      	ite	eq
 800039a:	2301      	moveq	r3, #1
 800039c:	2300      	movne	r3, #0
 800039e:	b2db      	uxtb	r3, r3
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000048 	.word	0x20000048

080003b0 <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d901      	bls.n	80003c4 <is_button_held+0x14>
 80003c0:	2300      	movs	r3, #0
 80003c2:	e007      	b.n	80003d4 <is_button_held+0x24>
	return (flagForButtonHold[index] == 1);
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <is_button_held+0x30>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	bf0c      	ite	eq
 80003ce:	2301      	moveq	r3, #1
 80003d0:	2300      	movne	r3, #0
 80003d2:	b2db      	uxtb	r3, r3
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2000004c 	.word	0x2000004c

080003e4 <reset_flagForButtonHold>:

void reset_flagForButtonHold(unsigned char index) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	flagForButtonHold[index] = 0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <reset_flagForButtonHold+0x1c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	54d1      	strb	r1, [r2, r3]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	2000004c 	.word	0x2000004c

08000404 <fsm_manual>:
#include "fsm_manual.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void fsm_manual() {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

    switch (buttonState[0]) {
 800040a:	4b9c      	ldr	r3, [pc, #624]	; (800067c <fsm_manual+0x278>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <fsm_manual+0x14>
 8000412:	2b01      	cmp	r3, #1
 8000414:	d018      	beq.n	8000448 <fsm_manual+0x44>
            if (!is_button_pressed(0)) {
                buttonState[0] = BUTTON_RELEASED;
            }
            break;
        default:
            break;
 8000416:	e024      	b.n	8000462 <fsm_manual+0x5e>
            if (is_button_pressed(0)) {
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff95 	bl	8000348 <is_button_pressed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d01b      	beq.n	800045c <fsm_manual+0x58>
                buttonState[0] = BUTTON_PRESSED;
 8000424:	4b95      	ldr	r3, [pc, #596]	; (800067c <fsm_manual+0x278>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
                mode++;
 800042a:	4b95      	ldr	r3, [pc, #596]	; (8000680 <fsm_manual+0x27c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	4a93      	ldr	r2, [pc, #588]	; (8000680 <fsm_manual+0x27c>)
 8000432:	6013      	str	r3, [r2, #0]
                if (mode > 4) {
 8000434:	4b92      	ldr	r3, [pc, #584]	; (8000680 <fsm_manual+0x27c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b04      	cmp	r3, #4
 800043a:	dd0f      	ble.n	800045c <fsm_manual+0x58>
                    mode = 1;
 800043c:	4b90      	ldr	r3, [pc, #576]	; (8000680 <fsm_manual+0x27c>)
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
                    resetCountValue();
 8000442:	f000 fbb9 	bl	8000bb8 <resetCountValue>
            break;
 8000446:	e009      	b.n	800045c <fsm_manual+0x58>
            if (!is_button_pressed(0)) {
 8000448:	2000      	movs	r0, #0
 800044a:	f7ff ff7d 	bl	8000348 <is_button_pressed>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d105      	bne.n	8000460 <fsm_manual+0x5c>
                buttonState[0] = BUTTON_RELEASED;
 8000454:	4b89      	ldr	r3, [pc, #548]	; (800067c <fsm_manual+0x278>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
            break;
 800045a:	e001      	b.n	8000460 <fsm_manual+0x5c>
            break;
 800045c:	bf00      	nop
 800045e:	e000      	b.n	8000462 <fsm_manual+0x5e>
            break;
 8000460:	bf00      	nop
    }


    switch (buttonState[1]) {
 8000462:	4b86      	ldr	r3, [pc, #536]	; (800067c <fsm_manual+0x278>)
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	2b02      	cmp	r3, #2
 8000468:	f000 809b 	beq.w	80005a2 <fsm_manual+0x19e>
 800046c:	2b02      	cmp	r3, #2
 800046e:	f300 80e6 	bgt.w	800063e <fsm_manual+0x23a>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <fsm_manual+0x78>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d045      	beq.n	8000506 <fsm_manual+0x102>
                        break;
                }
            }
            break;
        default:
            break;
 800047a:	e0e0      	b.n	800063e <fsm_manual+0x23a>
            if (is_button_pressed(1)) {
 800047c:	2001      	movs	r0, #1
 800047e:	f7ff ff63 	bl	8000348 <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d034      	beq.n	80004f2 <fsm_manual+0xee>
                buttonState[1] = BUTTON_PRESSED;
 8000488:	4b7c      	ldr	r3, [pc, #496]	; (800067c <fsm_manual+0x278>)
 800048a:	2201      	movs	r2, #1
 800048c:	705a      	strb	r2, [r3, #1]
                switch (mode) {
 800048e:	4b7c      	ldr	r3, [pc, #496]	; (8000680 <fsm_manual+0x27c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d020      	beq.n	80004d8 <fsm_manual+0xd4>
 8000496:	2b04      	cmp	r3, #4
 8000498:	dc2d      	bgt.n	80004f6 <fsm_manual+0xf2>
 800049a:	2b02      	cmp	r3, #2
 800049c:	d002      	beq.n	80004a4 <fsm_manual+0xa0>
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d00d      	beq.n	80004be <fsm_manual+0xba>
                        break;
 80004a2:	e028      	b.n	80004f6 <fsm_manual+0xf2>
                        red_draft++;
 80004a4:	4b77      	ldr	r3, [pc, #476]	; (8000684 <fsm_manual+0x280>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	4a76      	ldr	r2, [pc, #472]	; (8000684 <fsm_manual+0x280>)
 80004ac:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 80004ae:	4b75      	ldr	r3, [pc, #468]	; (8000684 <fsm_manual+0x280>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b63      	cmp	r3, #99	; 0x63
 80004b4:	dd21      	ble.n	80004fa <fsm_manual+0xf6>
 80004b6:	4b73      	ldr	r3, [pc, #460]	; (8000684 <fsm_manual+0x280>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
                        break;
 80004bc:	e01d      	b.n	80004fa <fsm_manual+0xf6>
                        yellow_draft++;
 80004be:	4b72      	ldr	r3, [pc, #456]	; (8000688 <fsm_manual+0x284>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	4a70      	ldr	r2, [pc, #448]	; (8000688 <fsm_manual+0x284>)
 80004c6:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 80004c8:	4b6f      	ldr	r3, [pc, #444]	; (8000688 <fsm_manual+0x284>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b63      	cmp	r3, #99	; 0x63
 80004ce:	dd16      	ble.n	80004fe <fsm_manual+0xfa>
 80004d0:	4b6d      	ldr	r3, [pc, #436]	; (8000688 <fsm_manual+0x284>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
                        break;
 80004d6:	e012      	b.n	80004fe <fsm_manual+0xfa>
                        green_draft++;
 80004d8:	4b6c      	ldr	r3, [pc, #432]	; (800068c <fsm_manual+0x288>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a6b      	ldr	r2, [pc, #428]	; (800068c <fsm_manual+0x288>)
 80004e0:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 80004e2:	4b6a      	ldr	r3, [pc, #424]	; (800068c <fsm_manual+0x288>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b63      	cmp	r3, #99	; 0x63
 80004e8:	dd0b      	ble.n	8000502 <fsm_manual+0xfe>
 80004ea:	4b68      	ldr	r3, [pc, #416]	; (800068c <fsm_manual+0x288>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
                        break;
 80004f0:	e007      	b.n	8000502 <fsm_manual+0xfe>
            }
 80004f2:	bf00      	nop
 80004f4:	e0a4      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 80004f6:	bf00      	nop
 80004f8:	e0a2      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 80004fa:	bf00      	nop
 80004fc:	e0a0      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 80004fe:	bf00      	nop
 8000500:	e09e      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 8000502:	bf00      	nop
            break;
 8000504:	e09c      	b.n	8000640 <fsm_manual+0x23c>
            if (!is_button_pressed(1)) {
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff ff1e 	bl	8000348 <is_button_pressed>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d102      	bne.n	8000518 <fsm_manual+0x114>
                buttonState[1] = BUTTON_RELEASED;
 8000512:	4b5a      	ldr	r3, [pc, #360]	; (800067c <fsm_manual+0x278>)
 8000514:	2200      	movs	r2, #0
 8000516:	705a      	strb	r2, [r3, #1]
            if (is_button_pressed_1s(1)) {
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff2f 	bl	800037c <is_button_pressed_1s>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d034      	beq.n	800058e <fsm_manual+0x18a>
                buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000524:	4b55      	ldr	r3, [pc, #340]	; (800067c <fsm_manual+0x278>)
 8000526:	2202      	movs	r2, #2
 8000528:	705a      	strb	r2, [r3, #1]
                switch (mode) {
 800052a:	4b55      	ldr	r3, [pc, #340]	; (8000680 <fsm_manual+0x27c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d020      	beq.n	8000574 <fsm_manual+0x170>
 8000532:	2b04      	cmp	r3, #4
 8000534:	dc2d      	bgt.n	8000592 <fsm_manual+0x18e>
 8000536:	2b02      	cmp	r3, #2
 8000538:	d002      	beq.n	8000540 <fsm_manual+0x13c>
 800053a:	2b03      	cmp	r3, #3
 800053c:	d00d      	beq.n	800055a <fsm_manual+0x156>
                        break;
 800053e:	e028      	b.n	8000592 <fsm_manual+0x18e>
                        red_draft++;
 8000540:	4b50      	ldr	r3, [pc, #320]	; (8000684 <fsm_manual+0x280>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a4f      	ldr	r2, [pc, #316]	; (8000684 <fsm_manual+0x280>)
 8000548:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 800054a:	4b4e      	ldr	r3, [pc, #312]	; (8000684 <fsm_manual+0x280>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b63      	cmp	r3, #99	; 0x63
 8000550:	dd21      	ble.n	8000596 <fsm_manual+0x192>
 8000552:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <fsm_manual+0x280>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
                        break;
 8000558:	e01d      	b.n	8000596 <fsm_manual+0x192>
                        yellow_draft++;
 800055a:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <fsm_manual+0x284>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a49      	ldr	r2, [pc, #292]	; (8000688 <fsm_manual+0x284>)
 8000562:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 8000564:	4b48      	ldr	r3, [pc, #288]	; (8000688 <fsm_manual+0x284>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b63      	cmp	r3, #99	; 0x63
 800056a:	dd16      	ble.n	800059a <fsm_manual+0x196>
 800056c:	4b46      	ldr	r3, [pc, #280]	; (8000688 <fsm_manual+0x284>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
                        break;
 8000572:	e012      	b.n	800059a <fsm_manual+0x196>
                        green_draft++;
 8000574:	4b45      	ldr	r3, [pc, #276]	; (800068c <fsm_manual+0x288>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a44      	ldr	r2, [pc, #272]	; (800068c <fsm_manual+0x288>)
 800057c:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <fsm_manual+0x288>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b63      	cmp	r3, #99	; 0x63
 8000584:	dd0b      	ble.n	800059e <fsm_manual+0x19a>
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <fsm_manual+0x288>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
                        break;
 800058c:	e007      	b.n	800059e <fsm_manual+0x19a>
            }
 800058e:	bf00      	nop
 8000590:	e056      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 8000592:	bf00      	nop
 8000594:	e054      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 8000596:	bf00      	nop
 8000598:	e052      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 800059a:	bf00      	nop
 800059c:	e050      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 800059e:	bf00      	nop
            break;
 80005a0:	e04e      	b.n	8000640 <fsm_manual+0x23c>
            if (!is_button_pressed(1)) {
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff fed0 	bl	8000348 <is_button_pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d102      	bne.n	80005b4 <fsm_manual+0x1b0>
                buttonState[1] = BUTTON_RELEASED;
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <fsm_manual+0x278>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	705a      	strb	r2, [r3, #1]
            if (is_button_held(1)) {
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff fefb 	bl	80003b0 <is_button_held>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d034      	beq.n	800062a <fsm_manual+0x226>
                reset_flagForButtonHold(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff ff0f 	bl	80003e4 <reset_flagForButtonHold>
                switch (mode) {
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <fsm_manual+0x27c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d020      	beq.n	8000610 <fsm_manual+0x20c>
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	dc2d      	bgt.n	800062e <fsm_manual+0x22a>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d002      	beq.n	80005dc <fsm_manual+0x1d8>
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d00d      	beq.n	80005f6 <fsm_manual+0x1f2>
                        break;
 80005da:	e028      	b.n	800062e <fsm_manual+0x22a>
                        red_draft++;
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <fsm_manual+0x280>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a28      	ldr	r2, [pc, #160]	; (8000684 <fsm_manual+0x280>)
 80005e4:	6013      	str	r3, [r2, #0]
                        if (red_draft > 99) red_draft = 0;
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <fsm_manual+0x280>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b63      	cmp	r3, #99	; 0x63
 80005ec:	dd21      	ble.n	8000632 <fsm_manual+0x22e>
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <fsm_manual+0x280>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
                        break;
 80005f4:	e01d      	b.n	8000632 <fsm_manual+0x22e>
                        yellow_draft++;
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <fsm_manual+0x284>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <fsm_manual+0x284>)
 80005fe:	6013      	str	r3, [r2, #0]
                        if (yellow_draft > 99) yellow_draft = 0;
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <fsm_manual+0x284>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b63      	cmp	r3, #99	; 0x63
 8000606:	dd16      	ble.n	8000636 <fsm_manual+0x232>
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <fsm_manual+0x284>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
                        break;
 800060e:	e012      	b.n	8000636 <fsm_manual+0x232>
                        green_draft++;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <fsm_manual+0x288>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <fsm_manual+0x288>)
 8000618:	6013      	str	r3, [r2, #0]
                        if (green_draft > 99) green_draft = 0;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <fsm_manual+0x288>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b63      	cmp	r3, #99	; 0x63
 8000620:	dd0b      	ble.n	800063a <fsm_manual+0x236>
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <fsm_manual+0x288>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
                        break;
 8000628:	e007      	b.n	800063a <fsm_manual+0x236>
            }
 800062a:	bf00      	nop
 800062c:	e008      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 800062e:	bf00      	nop
 8000630:	e006      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 8000632:	bf00      	nop
 8000634:	e004      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 8000636:	bf00      	nop
 8000638:	e002      	b.n	8000640 <fsm_manual+0x23c>
                        break;
 800063a:	bf00      	nop
            break;
 800063c:	e000      	b.n	8000640 <fsm_manual+0x23c>
            break;
 800063e:	bf00      	nop
    }


    switch (buttonState[2]) {
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <fsm_manual+0x278>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <fsm_manual+0x24a>
 8000648:	2b01      	cmp	r3, #1
 800064a:	d06a      	beq.n	8000722 <fsm_manual+0x31e>
            if (!is_button_pressed(2)) {
                buttonState[2] = BUTTON_RELEASED;
            }
            break;
        default:
            break;
 800064c:	e073      	b.n	8000736 <fsm_manual+0x332>
            if (is_button_pressed(2)) {
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff fe7a 	bl	8000348 <is_button_pressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d05f      	beq.n	800071a <fsm_manual+0x316>
                buttonState[2] = BUTTON_PRESSED;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <fsm_manual+0x278>)
 800065c:	2201      	movs	r2, #1
 800065e:	709a      	strb	r2, [r3, #2]
                int diff = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
                switch (mode) {
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <fsm_manual+0x27c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d03f      	beq.n	80006ec <fsm_manual+0x2e8>
 800066c:	2b04      	cmp	r3, #4
 800066e:	dc56      	bgt.n	800071e <fsm_manual+0x31a>
 8000670:	2b02      	cmp	r3, #2
 8000672:	d00d      	beq.n	8000690 <fsm_manual+0x28c>
 8000674:	2b03      	cmp	r3, #3
 8000676:	d022      	beq.n	80006be <fsm_manual+0x2ba>
                        break;
 8000678:	e051      	b.n	800071e <fsm_manual+0x31a>
 800067a:	bf00      	nop
 800067c:	20000060 	.word	0x20000060
 8000680:	20000000 	.word	0x20000000
 8000684:	2000007c 	.word	0x2000007c
 8000688:	2000006c 	.word	0x2000006c
 800068c:	20000074 	.word	0x20000074
                        diff = red_draft - red_value;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <fsm_manual+0x33c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <fsm_manual+0x340>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	607b      	str	r3, [r7, #4]
                        red_value = red_draft;
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <fsm_manual+0x33c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <fsm_manual+0x340>)
 80006a2:	6013      	str	r3, [r2, #0]
                        green_value += diff;
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <fsm_manual+0x344>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <fsm_manual+0x344>)
 80006ae:	6013      	str	r3, [r2, #0]
                        green_draft += diff;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <fsm_manual+0x348>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a24      	ldr	r2, [pc, #144]	; (800074c <fsm_manual+0x348>)
 80006ba:	6013      	str	r3, [r2, #0]
                        break;
 80006bc:	e030      	b.n	8000720 <fsm_manual+0x31c>
                        diff = yellow_draft - yellow_value;
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <fsm_manual+0x34c>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <fsm_manual+0x350>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	607b      	str	r3, [r7, #4]
                        yellow_value = yellow_draft;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <fsm_manual+0x34c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a21      	ldr	r2, [pc, #132]	; (8000754 <fsm_manual+0x350>)
 80006d0:	6013      	str	r3, [r2, #0]
                        red_value += diff;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <fsm_manual+0x340>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <fsm_manual+0x340>)
 80006dc:	6013      	str	r3, [r2, #0]
                        red_draft += diff;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <fsm_manual+0x33c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <fsm_manual+0x33c>)
 80006e8:	6013      	str	r3, [r2, #0]
                        break;
 80006ea:	e019      	b.n	8000720 <fsm_manual+0x31c>
                        diff = green_draft - green_value;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <fsm_manual+0x348>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <fsm_manual+0x344>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	607b      	str	r3, [r7, #4]
                        green_value = green_draft;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <fsm_manual+0x348>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <fsm_manual+0x344>)
 80006fe:	6013      	str	r3, [r2, #0]
                        green_value += diff;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <fsm_manual+0x344>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <fsm_manual+0x344>)
 800070a:	6013      	str	r3, [r2, #0]
                        green_draft += diff;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <fsm_manual+0x348>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <fsm_manual+0x348>)
 8000716:	6013      	str	r3, [r2, #0]
                        break;
 8000718:	e002      	b.n	8000720 <fsm_manual+0x31c>
            }
 800071a:	bf00      	nop
 800071c:	e00b      	b.n	8000736 <fsm_manual+0x332>
                        break;
 800071e:	bf00      	nop
            break;
 8000720:	e009      	b.n	8000736 <fsm_manual+0x332>
            if (!is_button_pressed(2)) {
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff fe10 	bl	8000348 <is_button_pressed>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <fsm_manual+0x330>
                buttonState[2] = BUTTON_RELEASED;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <fsm_manual+0x354>)
 8000730:	2200      	movs	r2, #0
 8000732:	709a      	strb	r2, [r3, #2]
            break;
 8000734:	bf00      	nop
    }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000007c 	.word	0x2000007c
 8000744:	20000068 	.word	0x20000068
 8000748:	20000070 	.word	0x20000070
 800074c:	20000074 	.word	0x20000074
 8000750:	2000006c 	.word	0x2000006c
 8000754:	20000078 	.word	0x20000078
 8000758:	20000060 	.word	0x20000060

0800075c <NormalMode>:
extern int count1, count2;          // Biến được khai báo ở file led_display.c
extern enum LEDState state1, state2; // khai báo để sử dụng lại từ file led_display.c

extern int red_value, yellow_value, green_value;

void NormalMode() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    count1--;
 8000760:	4bab      	ldr	r3, [pc, #684]	; (8000a10 <NormalMode+0x2b4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	4aaa      	ldr	r2, [pc, #680]	; (8000a10 <NormalMode+0x2b4>)
 8000768:	6013      	str	r3, [r2, #0]
    count2--;
 800076a:	4baa      	ldr	r3, [pc, #680]	; (8000a14 <NormalMode+0x2b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	4aa8      	ldr	r2, [pc, #672]	; (8000a14 <NormalMode+0x2b8>)
 8000772:	6013      	str	r3, [r2, #0]
    switch (state1) {
 8000774:	4ba8      	ldr	r3, [pc, #672]	; (8000a18 <NormalMode+0x2bc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d069      	beq.n	8000850 <NormalMode+0xf4>
 800077c:	2b02      	cmp	r3, #2
 800077e:	f300 8098 	bgt.w	80008b2 <NormalMode+0x156>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d002      	beq.n	800078c <NormalMode+0x30>
 8000786:	2b01      	cmp	r3, #1
 8000788:	d031      	beq.n	80007ee <NormalMode+0x92>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 800078a:	e092      	b.n	80008b2 <NormalMode+0x156>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	48a2      	ldr	r0, [pc, #648]	; (8000a1c <NormalMode+0x2c0>)
 8000794:	f001 fb25 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	489f      	ldr	r0, [pc, #636]	; (8000a1c <NormalMode+0x2c0>)
 80007a0:	f001 fb1f 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007aa:	489c      	ldr	r0, [pc, #624]	; (8000a1c <NormalMode+0x2c0>)
 80007ac:	f001 fb19 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 80007b0:	4b97      	ldr	r3, [pc, #604]	; (8000a10 <NormalMode+0x2b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	da7e      	bge.n	80008b6 <NormalMode+0x15a>
                count1 = green_value - 1;
 80007b8:	4b99      	ldr	r3, [pc, #612]	; (8000a20 <NormalMode+0x2c4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	4a94      	ldr	r2, [pc, #592]	; (8000a10 <NormalMode+0x2b4>)
 80007c0:	6013      	str	r3, [r2, #0]
                state1 = GREEN;
 80007c2:	4b95      	ldr	r3, [pc, #596]	; (8000a18 <NormalMode+0x2bc>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ce:	4893      	ldr	r0, [pc, #588]	; (8000a1c <NormalMode+0x2c0>)
 80007d0:	f001 fb07 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	4890      	ldr	r0, [pc, #576]	; (8000a1c <NormalMode+0x2c0>)
 80007dc:	f001 fb01 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e6:	488d      	ldr	r0, [pc, #564]	; (8000a1c <NormalMode+0x2c0>)
 80007e8:	f001 fafb 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 80007ec:	e063      	b.n	80008b6 <NormalMode+0x15a>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f4:	4889      	ldr	r0, [pc, #548]	; (8000a1c <NormalMode+0x2c0>)
 80007f6:	f001 faf4 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	4886      	ldr	r0, [pc, #536]	; (8000a1c <NormalMode+0x2c0>)
 8000802:	f001 faee 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	4883      	ldr	r0, [pc, #524]	; (8000a1c <NormalMode+0x2c0>)
 800080e:	f001 fae8 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 8000812:	4b7f      	ldr	r3, [pc, #508]	; (8000a10 <NormalMode+0x2b4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	da4f      	bge.n	80008ba <NormalMode+0x15e>
                count1 = red_value - 1;
 800081a:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <NormalMode+0x2c8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	4a7b      	ldr	r2, [pc, #492]	; (8000a10 <NormalMode+0x2b4>)
 8000822:	6013      	str	r3, [r2, #0]
                state1 = RED;
 8000824:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <NormalMode+0x2bc>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	487a      	ldr	r0, [pc, #488]	; (8000a1c <NormalMode+0x2c0>)
 8000832:	f001 fad6 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4877      	ldr	r0, [pc, #476]	; (8000a1c <NormalMode+0x2c0>)
 800083e:	f001 fad0 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000848:	4874      	ldr	r0, [pc, #464]	; (8000a1c <NormalMode+0x2c0>)
 800084a:	f001 faca 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 800084e:	e034      	b.n	80008ba <NormalMode+0x15e>
            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	4871      	ldr	r0, [pc, #452]	; (8000a1c <NormalMode+0x2c0>)
 8000858:	f001 fac3 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	486e      	ldr	r0, [pc, #440]	; (8000a1c <NormalMode+0x2c0>)
 8000864:	f001 fabd 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	486b      	ldr	r0, [pc, #428]	; (8000a1c <NormalMode+0x2c0>)
 8000870:	f001 fab7 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count1 < 0) {
 8000874:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <NormalMode+0x2b4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	da20      	bge.n	80008be <NormalMode+0x162>
                count1 = yellow_value - 1;
 800087c:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <NormalMode+0x2cc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <NormalMode+0x2b4>)
 8000884:	6013      	str	r3, [r2, #0]
                state1 = YELLOW;
 8000886:	4b64      	ldr	r3, [pc, #400]	; (8000a18 <NormalMode+0x2bc>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	4862      	ldr	r0, [pc, #392]	; (8000a1c <NormalMode+0x2c0>)
 8000894:	f001 faa5 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089e:	485f      	ldr	r0, [pc, #380]	; (8000a1c <NormalMode+0x2c0>)
 80008a0:	f001 fa9f 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	485c      	ldr	r0, [pc, #368]	; (8000a1c <NormalMode+0x2c0>)
 80008ac:	f001 fa99 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 80008b0:	e005      	b.n	80008be <NormalMode+0x162>
            break;
 80008b2:	bf00      	nop
 80008b4:	e004      	b.n	80008c0 <NormalMode+0x164>
            break;
 80008b6:	bf00      	nop
 80008b8:	e002      	b.n	80008c0 <NormalMode+0x164>
            break;
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <NormalMode+0x164>
            break;
 80008be:	bf00      	nop
    }
    switch (state2) {
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <NormalMode+0x2d0>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d069      	beq.n	800099c <NormalMode+0x240>
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	f300 8098 	bgt.w	80009fe <NormalMode+0x2a2>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <NormalMode+0x17c>
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d031      	beq.n	800093a <NormalMode+0x1de>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 80008d6:	e092      	b.n	80009fe <NormalMode+0x2a2>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008de:	484f      	ldr	r0, [pc, #316]	; (8000a1c <NormalMode+0x2c0>)
 80008e0:	f001 fa7f 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ea:	484c      	ldr	r0, [pc, #304]	; (8000a1c <NormalMode+0x2c0>)
 80008ec:	f001 fa79 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	4849      	ldr	r0, [pc, #292]	; (8000a1c <NormalMode+0x2c0>)
 80008f8:	f001 fa73 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 80008fc:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <NormalMode+0x2b8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	da7e      	bge.n	8000a02 <NormalMode+0x2a6>
                count2 = green_value - 1;
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <NormalMode+0x2c4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <NormalMode+0x2b8>)
 800090c:	6013      	str	r3, [r2, #0]
                state2 = GREEN;
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <NormalMode+0x2d0>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091a:	4840      	ldr	r0, [pc, #256]	; (8000a1c <NormalMode+0x2c0>)
 800091c:	f001 fa61 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	483d      	ldr	r0, [pc, #244]	; (8000a1c <NormalMode+0x2c0>)
 8000928:	f001 fa5b 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	483a      	ldr	r0, [pc, #232]	; (8000a1c <NormalMode+0x2c0>)
 8000934:	f001 fa55 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 8000938:	e063      	b.n	8000a02 <NormalMode+0x2a6>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <NormalMode+0x2c0>)
 8000942:	f001 fa4e 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094c:	4833      	ldr	r0, [pc, #204]	; (8000a1c <NormalMode+0x2c0>)
 800094e:	f001 fa48 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4830      	ldr	r0, [pc, #192]	; (8000a1c <NormalMode+0x2c0>)
 800095a:	f001 fa42 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <NormalMode+0x2b8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	da4f      	bge.n	8000a06 <NormalMode+0x2aa>
                count2 = red_value - 1;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <NormalMode+0x2c8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a29      	ldr	r2, [pc, #164]	; (8000a14 <NormalMode+0x2b8>)
 800096e:	6013      	str	r3, [r2, #0]
                state2 = RED;
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <NormalMode+0x2d0>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097c:	4827      	ldr	r0, [pc, #156]	; (8000a1c <NormalMode+0x2c0>)
 800097e:	f001 fa30 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000988:	4824      	ldr	r0, [pc, #144]	; (8000a1c <NormalMode+0x2c0>)
 800098a:	f001 fa2a 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000994:	4821      	ldr	r0, [pc, #132]	; (8000a1c <NormalMode+0x2c0>)
 8000996:	f001 fa24 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 800099a:	e034      	b.n	8000a06 <NormalMode+0x2aa>
            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <NormalMode+0x2c0>)
 80009a4:	f001 fa1d 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <NormalMode+0x2c0>)
 80009b0:	f001 fa17 	bl	8001de2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <NormalMode+0x2c0>)
 80009bc:	f001 fa11 	bl	8001de2 <HAL_GPIO_WritePin>
            if (count2 < 0) {
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <NormalMode+0x2b8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	da20      	bge.n	8000a0a <NormalMode+0x2ae>
                count2 = yellow_value - 1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <NormalMode+0x2cc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <NormalMode+0x2b8>)
 80009d0:	6013      	str	r3, [r2, #0]
                state2 = YELLOW;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <NormalMode+0x2d0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <NormalMode+0x2c0>)
 80009e0:	f001 f9ff 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <NormalMode+0x2c0>)
 80009ec:	f001 f9f9 	bl	8001de2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <NormalMode+0x2c0>)
 80009f8:	f001 f9f3 	bl	8001de2 <HAL_GPIO_WritePin>
            break;
 80009fc:	e005      	b.n	8000a0a <NormalMode+0x2ae>
            break;
 80009fe:	bf00      	nop
 8000a00:	e004      	b.n	8000a0c <NormalMode+0x2b0>
            break;
 8000a02:	bf00      	nop
 8000a04:	e002      	b.n	8000a0c <NormalMode+0x2b0>
            break;
 8000a06:	bf00      	nop
 8000a08:	e000      	b.n	8000a0c <NormalMode+0x2b0>
            break;
 8000a0a:	bf00      	nop
    }
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000004 	.word	0x20000004
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000063 	.word	0x20000063
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	20000070 	.word	0x20000070
 8000a24:	20000068 	.word	0x20000068
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <toggle_red>:

void toggle_red(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <toggle_red+0x4c>)
 8000a3a:	f001 f9ea 	bl	8001e12 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <toggle_red+0x4c>)
 8000a44:	f001 f9e5 	bl	8001e12 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <toggle_red+0x4c>)
 8000a50:	f001 f9c7 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <toggle_red+0x4c>)
 8000a5c:	f001 f9c1 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <toggle_red+0x4c>)
 8000a68:	f001 f9bb 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <toggle_red+0x4c>)
 8000a74:	f001 f9b5 	bl	8001de2 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <toggle_yellow>:

void toggle_yellow(){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <toggle_yellow+0x4c>)
 8000a8a:	f001 f9c2 	bl	8001e12 <HAL_GPIO_TogglePin>
	            HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <toggle_yellow+0x4c>)
 8000a94:	f001 f9bd 	bl	8001e12 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <toggle_yellow+0x4c>)
 8000aa0:	f001 f99f 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <toggle_yellow+0x4c>)
 8000aac:	f001 f999 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <toggle_yellow+0x4c>)
 8000ab8:	f001 f993 	bl	8001de2 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4802      	ldr	r0, [pc, #8]	; (8000acc <toggle_yellow+0x4c>)
 8000ac4:	f001 f98d 	bl	8001de2 <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <toggle_green>:

void toggle_green(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <toggle_green+0x4c>)
 8000ada:	f001 f99a 	bl	8001e12 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <toggle_green+0x4c>)
 8000ae4:	f001 f995 	bl	8001e12 <HAL_GPIO_TogglePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <toggle_green+0x4c>)
 8000af0:	f001 f977 	bl	8001de2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <toggle_green+0x4c>)
 8000afc:	f001 f971 	bl	8001de2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <toggle_green+0x4c>)
 8000b08:	f001 f96b 	bl	8001de2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <toggle_green+0x4c>)
 8000b14:	f001 f965 	bl	8001de2 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <fsm_automatic>:

void fsm_automatic() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    switch (mode) {
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <fsm_automatic+0x44>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d816      	bhi.n	8000b5c <fsm_automatic+0x3c>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <fsm_automatic+0x14>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b45 	.word	0x08000b45
 8000b38:	08000b4b 	.word	0x08000b4b
 8000b3c:	08000b51 	.word	0x08000b51
 8000b40:	08000b57 	.word	0x08000b57
        case 1:
            NormalMode();
 8000b44:	f7ff fe0a 	bl	800075c <NormalMode>
            break;
 8000b48:	e009      	b.n	8000b5e <fsm_automatic+0x3e>
        case 2:
            toggle_red();
 8000b4a:	f7ff ff71 	bl	8000a30 <toggle_red>
            break;
 8000b4e:	e006      	b.n	8000b5e <fsm_automatic+0x3e>
        case 3:
           toggle_yellow();
 8000b50:	f7ff ff96 	bl	8000a80 <toggle_yellow>
            break;
 8000b54:	e003      	b.n	8000b5e <fsm_automatic+0x3e>
        case 4:
            toggle_green();
 8000b56:	f7ff ffbb 	bl	8000ad0 <toggle_green>
            break;
 8000b5a:	e000      	b.n	8000b5e <fsm_automatic+0x3e>
        default:
            break;
 8000b5c:	bf00      	nop
    }
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000

08000b68 <LedTimeDurationInit>:
#include "global.h"
int mode = 1;
int red_value, yellow_value, green_value;
int red_draft, yellow_draft, green_draft;

void LedTimeDurationInit() {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	red_value = RED_INIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LedTimeDurationInit+0x38>)
 8000b6e:	221e      	movs	r2, #30
 8000b70:	601a      	str	r2, [r3, #0]
	yellow_value = YELLOW_INIT;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LedTimeDurationInit+0x3c>)
 8000b74:	2205      	movs	r2, #5
 8000b76:	601a      	str	r2, [r3, #0]
	green_value = GREEN_INIT;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LedTimeDurationInit+0x40>)
 8000b7a:	2219      	movs	r2, #25
 8000b7c:	601a      	str	r2, [r3, #0]
	red_draft = red_value;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LedTimeDurationInit+0x38>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LedTimeDurationInit+0x44>)
 8000b84:	6013      	str	r3, [r2, #0]
	yellow_draft = yellow_value;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LedTimeDurationInit+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <LedTimeDurationInit+0x48>)
 8000b8c:	6013      	str	r3, [r2, #0]
	green_draft = green_value;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LedTimeDurationInit+0x40>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <LedTimeDurationInit+0x4c>)
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000068 	.word	0x20000068
 8000ba4:	20000078 	.word	0x20000078
 8000ba8:	20000070 	.word	0x20000070
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	2000006c 	.word	0x2000006c
 8000bb4:	20000074 	.word	0x20000074

08000bb8 <resetCountValue>:
int count1 = RED_INIT;
int count2 = GREEN_INIT;
enum LEDState state1 = RED;
enum LEDState state2 = GREEN;

void resetCountValue() {
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	count1 = red_value;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <resetCountValue+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <resetCountValue+0x2c>)
 8000bc2:	6013      	str	r3, [r2, #0]
	count2 = green_value;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <resetCountValue+0x30>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <resetCountValue+0x34>)
 8000bca:	6013      	str	r3, [r2, #0]
	state1 = RED;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <resetCountValue+0x38>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <resetCountValue+0x3c>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	20000068 	.word	0x20000068
 8000be4:	20000004 	.word	0x20000004
 8000be8:	20000070 	.word	0x20000070
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000063 	.word	0x20000063
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <display7SEG>:

static void display7SEG(int num) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	f200 8180 	bhi.w	8000f08 <display7SEG+0x310>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <display7SEG+0x18>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	08000c81 	.word	0x08000c81
 8000c18:	08000cc9 	.word	0x08000cc9
 8000c1c:	08000d11 	.word	0x08000d11
 8000c20:	08000d59 	.word	0x08000d59
 8000c24:	08000da1 	.word	0x08000da1
 8000c28:	08000de9 	.word	0x08000de9
 8000c2c:	08000e31 	.word	0x08000e31
 8000c30:	08000e79 	.word	0x08000e79
 8000c34:	08000ec1 	.word	0x08000ec1
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	48b5      	ldr	r0, [pc, #724]	; (8000f14 <display7SEG+0x31c>)
 8000c3e:	f001 f8d0 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	48b3      	ldr	r0, [pc, #716]	; (8000f14 <display7SEG+0x31c>)
 8000c48:	f001 f8cb 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2104      	movs	r1, #4
 8000c50:	48b0      	ldr	r0, [pc, #704]	; (8000f14 <display7SEG+0x31c>)
 8000c52:	f001 f8c6 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	48ae      	ldr	r0, [pc, #696]	; (8000f14 <display7SEG+0x31c>)
 8000c5c:	f001 f8c1 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2110      	movs	r1, #16
 8000c64:	48ab      	ldr	r0, [pc, #684]	; (8000f14 <display7SEG+0x31c>)
 8000c66:	f001 f8bc 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	48a9      	ldr	r0, [pc, #676]	; (8000f14 <display7SEG+0x31c>)
 8000c70:	f001 f8b7 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	48a6      	ldr	r0, [pc, #664]	; (8000f14 <display7SEG+0x31c>)
 8000c7a:	f001 f8b2 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000c7e:	e144      	b.n	8000f0a <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	48a3      	ldr	r0, [pc, #652]	; (8000f14 <display7SEG+0x31c>)
 8000c86:	f001 f8ac 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	48a1      	ldr	r0, [pc, #644]	; (8000f14 <display7SEG+0x31c>)
 8000c90:	f001 f8a7 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	489e      	ldr	r0, [pc, #632]	; (8000f14 <display7SEG+0x31c>)
 8000c9a:	f001 f8a2 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	489c      	ldr	r0, [pc, #624]	; (8000f14 <display7SEG+0x31c>)
 8000ca4:	f001 f89d 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	4899      	ldr	r0, [pc, #612]	; (8000f14 <display7SEG+0x31c>)
 8000cae:	f001 f898 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4897      	ldr	r0, [pc, #604]	; (8000f14 <display7SEG+0x31c>)
 8000cb8:	f001 f893 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4894      	ldr	r0, [pc, #592]	; (8000f14 <display7SEG+0x31c>)
 8000cc2:	f001 f88e 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000cc6:	e120      	b.n	8000f0a <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4891      	ldr	r0, [pc, #580]	; (8000f14 <display7SEG+0x31c>)
 8000cce:	f001 f888 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	488f      	ldr	r0, [pc, #572]	; (8000f14 <display7SEG+0x31c>)
 8000cd8:	f001 f883 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	488c      	ldr	r0, [pc, #560]	; (8000f14 <display7SEG+0x31c>)
 8000ce2:	f001 f87e 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2108      	movs	r1, #8
 8000cea:	488a      	ldr	r0, [pc, #552]	; (8000f14 <display7SEG+0x31c>)
 8000cec:	f001 f879 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4887      	ldr	r0, [pc, #540]	; (8000f14 <display7SEG+0x31c>)
 8000cf6:	f001 f874 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4885      	ldr	r0, [pc, #532]	; (8000f14 <display7SEG+0x31c>)
 8000d00:	f001 f86f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4882      	ldr	r0, [pc, #520]	; (8000f14 <display7SEG+0x31c>)
 8000d0a:	f001 f86a 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000d0e:	e0fc      	b.n	8000f0a <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	487f      	ldr	r0, [pc, #508]	; (8000f14 <display7SEG+0x31c>)
 8000d16:	f001 f864 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	487d      	ldr	r0, [pc, #500]	; (8000f14 <display7SEG+0x31c>)
 8000d20:	f001 f85f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2104      	movs	r1, #4
 8000d28:	487a      	ldr	r0, [pc, #488]	; (8000f14 <display7SEG+0x31c>)
 8000d2a:	f001 f85a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2108      	movs	r1, #8
 8000d32:	4878      	ldr	r0, [pc, #480]	; (8000f14 <display7SEG+0x31c>)
 8000d34:	f001 f855 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4875      	ldr	r0, [pc, #468]	; (8000f14 <display7SEG+0x31c>)
 8000d3e:	f001 f850 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4873      	ldr	r0, [pc, #460]	; (8000f14 <display7SEG+0x31c>)
 8000d48:	f001 f84b 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4870      	ldr	r0, [pc, #448]	; (8000f14 <display7SEG+0x31c>)
 8000d52:	f001 f846 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000d56:	e0d8      	b.n	8000f0a <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	486d      	ldr	r0, [pc, #436]	; (8000f14 <display7SEG+0x31c>)
 8000d5e:	f001 f840 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2102      	movs	r1, #2
 8000d66:	486b      	ldr	r0, [pc, #428]	; (8000f14 <display7SEG+0x31c>)
 8000d68:	f001 f83b 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4868      	ldr	r0, [pc, #416]	; (8000f14 <display7SEG+0x31c>)
 8000d72:	f001 f836 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4866      	ldr	r0, [pc, #408]	; (8000f14 <display7SEG+0x31c>)
 8000d7c:	f001 f831 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	4863      	ldr	r0, [pc, #396]	; (8000f14 <display7SEG+0x31c>)
 8000d86:	f001 f82c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4861      	ldr	r0, [pc, #388]	; (8000f14 <display7SEG+0x31c>)
 8000d90:	f001 f827 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	485e      	ldr	r0, [pc, #376]	; (8000f14 <display7SEG+0x31c>)
 8000d9a:	f001 f822 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000d9e:	e0b4      	b.n	8000f0a <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2101      	movs	r1, #1
 8000da4:	485b      	ldr	r0, [pc, #364]	; (8000f14 <display7SEG+0x31c>)
 8000da6:	f001 f81c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	4859      	ldr	r0, [pc, #356]	; (8000f14 <display7SEG+0x31c>)
 8000db0:	f001 f817 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2104      	movs	r1, #4
 8000db8:	4856      	ldr	r0, [pc, #344]	; (8000f14 <display7SEG+0x31c>)
 8000dba:	f001 f812 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4854      	ldr	r0, [pc, #336]	; (8000f14 <display7SEG+0x31c>)
 8000dc4:	f001 f80d 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4851      	ldr	r0, [pc, #324]	; (8000f14 <display7SEG+0x31c>)
 8000dce:	f001 f808 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <display7SEG+0x31c>)
 8000dd8:	f001 f803 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	484c      	ldr	r0, [pc, #304]	; (8000f14 <display7SEG+0x31c>)
 8000de2:	f000 fffe 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000de6:	e090      	b.n	8000f0a <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2101      	movs	r1, #1
 8000dec:	4849      	ldr	r0, [pc, #292]	; (8000f14 <display7SEG+0x31c>)
 8000dee:	f000 fff8 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2102      	movs	r1, #2
 8000df6:	4847      	ldr	r0, [pc, #284]	; (8000f14 <display7SEG+0x31c>)
 8000df8:	f000 fff3 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4844      	ldr	r0, [pc, #272]	; (8000f14 <display7SEG+0x31c>)
 8000e02:	f000 ffee 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4842      	ldr	r0, [pc, #264]	; (8000f14 <display7SEG+0x31c>)
 8000e0c:	f000 ffe9 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	483f      	ldr	r0, [pc, #252]	; (8000f14 <display7SEG+0x31c>)
 8000e16:	f000 ffe4 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	483d      	ldr	r0, [pc, #244]	; (8000f14 <display7SEG+0x31c>)
 8000e20:	f000 ffdf 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <display7SEG+0x31c>)
 8000e2a:	f000 ffda 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000e2e:	e06c      	b.n	8000f0a <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2101      	movs	r1, #1
 8000e34:	4837      	ldr	r0, [pc, #220]	; (8000f14 <display7SEG+0x31c>)
 8000e36:	f000 ffd4 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4835      	ldr	r0, [pc, #212]	; (8000f14 <display7SEG+0x31c>)
 8000e40:	f000 ffcf 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2104      	movs	r1, #4
 8000e48:	4832      	ldr	r0, [pc, #200]	; (8000f14 <display7SEG+0x31c>)
 8000e4a:	f000 ffca 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	4830      	ldr	r0, [pc, #192]	; (8000f14 <display7SEG+0x31c>)
 8000e54:	f000 ffc5 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	482d      	ldr	r0, [pc, #180]	; (8000f14 <display7SEG+0x31c>)
 8000e5e:	f000 ffc0 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	482b      	ldr	r0, [pc, #172]	; (8000f14 <display7SEG+0x31c>)
 8000e68:	f000 ffbb 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	4828      	ldr	r0, [pc, #160]	; (8000f14 <display7SEG+0x31c>)
 8000e72:	f000 ffb6 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000e76:	e048      	b.n	8000f0a <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4825      	ldr	r0, [pc, #148]	; (8000f14 <display7SEG+0x31c>)
 8000e7e:	f000 ffb0 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2102      	movs	r1, #2
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <display7SEG+0x31c>)
 8000e88:	f000 ffab 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4820      	ldr	r0, [pc, #128]	; (8000f14 <display7SEG+0x31c>)
 8000e92:	f000 ffa6 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <display7SEG+0x31c>)
 8000e9c:	f000 ffa1 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <display7SEG+0x31c>)
 8000ea6:	f000 ff9c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	4819      	ldr	r0, [pc, #100]	; (8000f14 <display7SEG+0x31c>)
 8000eb0:	f000 ff97 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4816      	ldr	r0, [pc, #88]	; (8000f14 <display7SEG+0x31c>)
 8000eba:	f000 ff92 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000ebe:	e024      	b.n	8000f0a <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <display7SEG+0x31c>)
 8000ec6:	f000 ff8c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <display7SEG+0x31c>)
 8000ed0:	f000 ff87 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <display7SEG+0x31c>)
 8000eda:	f000 ff82 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <display7SEG+0x31c>)
 8000ee4:	f000 ff7d 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <display7SEG+0x31c>)
 8000eee:	f000 ff78 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <display7SEG+0x31c>)
 8000ef8:	f000 ff73 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <display7SEG+0x31c>)
 8000f02:	f000 ff6e 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000f06:	e000      	b.n	8000f0a <display7SEG+0x312>
		  default:
			  break;
 8000f08:	bf00      	nop
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800

08000f18 <get7SEG1Value>:

static int get7SEG1Value() {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <get7SEG1Value+0x48>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d816      	bhi.n	8000f54 <get7SEG1Value+0x3c>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <get7SEG1Value+0x14>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f43 	.word	0x08000f43
 8000f34:	08000f49 	.word	0x08000f49
 8000f38:	08000f4f 	.word	0x08000f4f
		case 1:
			return count1;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <get7SEG1Value+0x4c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e00a      	b.n	8000f58 <get7SEG1Value+0x40>
		case 2:
			return red_draft;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <get7SEG1Value+0x50>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <get7SEG1Value+0x40>
		case 3:
			return yellow_draft;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <get7SEG1Value+0x54>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e004      	b.n	8000f58 <get7SEG1Value+0x40>
		case 4:
			return green_draft;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <get7SEG1Value+0x58>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e001      	b.n	8000f58 <get7SEG1Value+0x40>
		default:
			break;
 8000f54:	bf00      	nop
	}
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004
 8000f68:	2000007c 	.word	0x2000007c
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	20000074 	.word	0x20000074

08000f74 <get7SEG2Value>:
static int get7SEG2Value() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <get7SEG2Value+0x48>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d816      	bhi.n	8000fb0 <get7SEG2Value+0x3c>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <get7SEG2Value+0x14>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08000f99 	.word	0x08000f99
 8000f8c:	08000f9f 	.word	0x08000f9f
 8000f90:	08000fa5 	.word	0x08000fa5
 8000f94:	08000fab 	.word	0x08000fab
		case 1:
			return count2;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <get7SEG2Value+0x4c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	e00a      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 2:
			return red_draft;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <get7SEG2Value+0x50>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 3:
			return yellow_draft;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <get7SEG2Value+0x54>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e004      	b.n	8000fb4 <get7SEG2Value+0x40>
		case 4:
			return green_draft;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <get7SEG2Value+0x58>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e001      	b.n	8000fb4 <get7SEG2Value+0x40>
		default:
			break;
 8000fb0:	bf00      	nop
	}
	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000007c 	.word	0x2000007c
 8000fc8:	2000006c 	.word	0x2000006c
 8000fcc:	20000074 	.word	0x20000074

08000fd0 <LEDScanning>:

//-------------------------quét led--------------------------------------
void LEDScanning() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	static int scan_index = 0;
	switch (scan_index) {
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <LEDScanning+0x208>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	f200 80f6 	bhi.w	80011ca <LEDScanning+0x1fa>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LEDScanning+0x14>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08000ff9 	.word	0x08000ff9
 8000fe8:	08001055 	.word	0x08001055
 8000fec:	080010bb 	.word	0x080010bb
 8000ff0:	08001117 	.word	0x08001117
 8000ff4:	0800117d 	.word	0x0800117d
		case 0:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4877      	ldr	r0, [pc, #476]	; (80011dc <LEDScanning+0x20c>)
 8001000:	f000 feef 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100a:	4874      	ldr	r0, [pc, #464]	; (80011dc <LEDScanning+0x20c>)
 800100c:	f000 fee9 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	4871      	ldr	r0, [pc, #452]	; (80011dc <LEDScanning+0x20c>)
 8001018:	f000 fee3 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	486e      	ldr	r0, [pc, #440]	; (80011dc <LEDScanning+0x20c>)
 8001024:	f000 fedd 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	486b      	ldr	r0, [pc, #428]	; (80011dc <LEDScanning+0x20c>)
 8001030:	f000 fed7 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() / 10);
 8001034:	f7ff ff70 	bl	8000f18 <get7SEG1Value>
 8001038:	4603      	mov	r3, r0
 800103a:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <LEDScanning+0x210>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1092      	asrs	r2, r2, #2
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdd6 	bl	8000bf8 <display7SEG>
			scan_index = 1;
 800104c:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <LEDScanning+0x208>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
			break;
 8001052:	e0be      	b.n	80011d2 <LEDScanning+0x202>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4860      	ldr	r0, [pc, #384]	; (80011dc <LEDScanning+0x20c>)
 800105c:	f000 fec1 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	485d      	ldr	r0, [pc, #372]	; (80011dc <LEDScanning+0x20c>)
 8001068:	f000 febb 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001072:	485a      	ldr	r0, [pc, #360]	; (80011dc <LEDScanning+0x20c>)
 8001074:	f000 feb5 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4857      	ldr	r0, [pc, #348]	; (80011dc <LEDScanning+0x20c>)
 8001080:	f000 feaf 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108a:	4854      	ldr	r0, [pc, #336]	; (80011dc <LEDScanning+0x20c>)
 800108c:	f000 fea9 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() % 10);
 8001090:	f7ff ff42 	bl	8000f18 <get7SEG1Value>
 8001094:	4601      	mov	r1, r0
 8001096:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <LEDScanning+0x210>)
 8001098:	fb83 2301 	smull	r2, r3, r3, r1
 800109c:	109a      	asrs	r2, r3, #2
 800109e:	17cb      	asrs	r3, r1, #31
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	1aca      	subs	r2, r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f7ff fda3 	bl	8000bf8 <display7SEG>
			scan_index = 2;
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <LEDScanning+0x208>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	601a      	str	r2, [r3, #0]
			break;
 80010b8:	e08b      	b.n	80011d2 <LEDScanning+0x202>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	4846      	ldr	r0, [pc, #280]	; (80011dc <LEDScanning+0x20c>)
 80010c2:	f000 fe8e 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4843      	ldr	r0, [pc, #268]	; (80011dc <LEDScanning+0x20c>)
 80010ce:	f000 fe88 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4840      	ldr	r0, [pc, #256]	; (80011dc <LEDScanning+0x20c>)
 80010da:	f000 fe82 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	483d      	ldr	r0, [pc, #244]	; (80011dc <LEDScanning+0x20c>)
 80010e6:	f000 fe7c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	483a      	ldr	r0, [pc, #232]	; (80011dc <LEDScanning+0x20c>)
 80010f2:	f000 fe76 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() / 10);
 80010f6:	f7ff ff3d 	bl	8000f74 <get7SEG2Value>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <LEDScanning+0x210>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	1092      	asrs	r2, r2, #2
 8001104:	17db      	asrs	r3, r3, #31
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd75 	bl	8000bf8 <display7SEG>
			scan_index = 3;
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <LEDScanning+0x208>)
 8001110:	2203      	movs	r2, #3
 8001112:	601a      	str	r2, [r3, #0]
			break;
 8001114:	e05d      	b.n	80011d2 <LEDScanning+0x202>
		case 3:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <LEDScanning+0x20c>)
 800111e:	f000 fe60 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	482c      	ldr	r0, [pc, #176]	; (80011dc <LEDScanning+0x20c>)
 800112a:	f000 fe5a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	4829      	ldr	r0, [pc, #164]	; (80011dc <LEDScanning+0x20c>)
 8001136:	f000 fe54 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <LEDScanning+0x20c>)
 8001142:	f000 fe4e 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <LEDScanning+0x20c>)
 800114e:	f000 fe48 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() % 10);
 8001152:	f7ff ff0f 	bl	8000f74 <get7SEG2Value>
 8001156:	4601      	mov	r1, r0
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <LEDScanning+0x210>)
 800115a:	fb83 2301 	smull	r2, r3, r3, r1
 800115e:	109a      	asrs	r2, r3, #2
 8001160:	17cb      	asrs	r3, r1, #31
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	1aca      	subs	r2, r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fd42 	bl	8000bf8 <display7SEG>
			scan_index = 4;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <LEDScanning+0x208>)
 8001176:	2204      	movs	r2, #4
 8001178:	601a      	str	r2, [r3, #0]
			break;
 800117a:	e02a      	b.n	80011d2 <LEDScanning+0x202>
		case 4:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001182:	4816      	ldr	r0, [pc, #88]	; (80011dc <LEDScanning+0x20c>)
 8001184:	f000 fe2d 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <LEDScanning+0x20c>)
 8001190:	f000 fe27 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <LEDScanning+0x20c>)
 800119c:	f000 fe21 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <LEDScanning+0x20c>)
 80011a8:	f000 fe1b 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <LEDScanning+0x20c>)
 80011b4:	f000 fe15 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(mode);
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <LEDScanning+0x214>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd1b 	bl	8000bf8 <display7SEG>
			scan_index = 0;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LEDScanning+0x208>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
			break;
 80011c8:	e003      	b.n	80011d2 <LEDScanning+0x202>
		default:
			scan_index = 0;
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <LEDScanning+0x208>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
			break;
 80011d0:	bf00      	nop
	}
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000064 	.word	0x20000064
 80011dc:	40010800 	.word	0x40010800
 80011e0:	66666667 	.word	0x66666667
 80011e4:	20000000 	.word	0x20000000

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Khởi tạo các giá trị toàn cục
	init_buffer();
 80011ec:	f7fe ffae 	bl	800014c <init_buffer>
	LedTimeDurationInit();
 80011f0:	f7ff fcba 	bl	8000b68 <LedTimeDurationInit>
//	SCH_Add_Task(init_buffer, 1, 1);
//	SCH_Add_Task(LedTimeDurationInit,1, 1);
	// Thêm các task vào scheduler
//	SCH_Add_Task(NormalMode, 1, 100);
	SCH_Add_Task(fsm_automatic, 1, 100);
 80011f4:	2264      	movs	r2, #100	; 0x64
 80011f6:	2101      	movs	r1, #1
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <main+0x68>)
 80011fa:	f000 f9bd 	bl	8001578 <SCH_Add_Task>
//	SCH_Add_Task(toggle_red, 50, 1);
//	SCH_Add_Task(toggle_yellow, 50, 1);
//	SCH_Add_Task(toggle_green, 50, 1);
	SCH_Add_Task(fsm_manual,2, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	2102      	movs	r1, #2
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <main+0x6c>)
 8001204:	f000 f9b8 	bl	8001578 <SCH_Add_Task>
	SCH_Add_Task(toggle_led, 50, 1000);
 8001208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800120c:	2132      	movs	r1, #50	; 0x32
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <main+0x70>)
 8001210:	f000 f9b2 	bl	8001578 <SCH_Add_Task>
	SCH_Add_Task(LEDScanning, 0, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	2100      	movs	r1, #0
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <main+0x74>)
 800121a:	f000 f9ad 	bl	8001578 <SCH_Add_Task>
	// Thêm task đọc nút nhấn vào scheduler
	  SCH_Add_Task(button_reading, 1, 1);  // Đọc nút nhấn mỗi 10ms
 800121e:	2201      	movs	r2, #1
 8001220:	2101      	movs	r1, #1
 8001222:	480f      	ldr	r0, [pc, #60]	; (8001260 <main+0x78>)
 8001224:	f000 f9a8 	bl	8001578 <SCH_Add_Task>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fada 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f81c 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f8a2 	bl	8001378 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001234:	f000 f854 	bl	80012e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <main+0x7c>)
 800123a:	f001 fa2f 	bl	800269c <HAL_TIM_Base_Start_IT>
  SCH_Add_Task(toggle_led, 50, 100);
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	2132      	movs	r1, #50	; 0x32
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <main+0x70>)
 8001244:	f000 f998 	bl	8001578 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001248:	f000 f95a 	bl	8001500 <SCH_Dispatch_Tasks>
 800124c:	e7fc      	b.n	8001248 <main+0x60>
 800124e:	bf00      	nop
 8001250:	08000b21 	.word	0x08000b21
 8001254:	08000405 	.word	0x08000405
 8001258:	08001781 	.word	0x08001781
 800125c:	08000fd1 	.word	0x08000fd1
 8001260:	080001e1 	.word	0x080001e1
 8001264:	20000080 	.word	0x20000080

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fdc0 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001292:	2310      	movs	r3, #16
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fdd0 	bl	8001e44 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012aa:	f000 f8d1 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 f83c 	bl	8002344 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f8bd 	bl	8001450 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3740      	adds	r7, #64	; 0x40
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM2_Init+0x94>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM2_Init+0x94>)
 8001306:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800130a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM2_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM2_Init+0x94>)
 8001314:	2209      	movs	r2, #9
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM2_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM2_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_TIM2_Init+0x94>)
 8001326:	f001 f969 	bl	80025fc <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001330:	f000 f88e 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_TIM2_Init+0x94>)
 8001342:	f001 fae7 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 f880 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM2_Init+0x94>)
 800135e:	f001 fcbf 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 f872 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000080 	.word	0x20000080

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_GPIO_Init+0xb8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <MX_GPIO_Init+0xb8>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_GPIO_Init+0xb8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_GPIO_Init+0xb8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80013bc:	2200      	movs	r2, #0
 80013be:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_GPIO_Init+0xbc>)
 80013c4:	f000 fd0d 	bl	8001de2 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013d0:	f000 fd07 	bl	8001de2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80013d4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013d8:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_GPIO_Init+0xbc>)
 80013ee:	f000 fb67 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80013f2:	2307      	movs	r3, #7
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001406:	f000 fb5b 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G1_Pin R2_Pin Y2_Pin G2_Pin
                           R1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 800140a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800140e:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001424:	f000 fb4c 	bl	8001ac0 <HAL_GPIO_Init>

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001444:	f000 f80a 	bl	800145c <SCH_Update>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <SCH_Update>:
        SCH_tasks_G[i].Period = 0;
        SCH_tasks_G[i].RunMe = 0;
    }
}

void SCH_Update(void) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e040      	b.n	80014ea <SCH_Update+0x8e>
        if (SCH_tasks_G[i].pTask) {
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <SCH_Update+0xa0>)
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d036      	beq.n	80014e4 <SCH_Update+0x88>
            if (SCH_tasks_G[i].Delay == 0) {
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <SCH_Update+0xa0>)
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d122      	bne.n	80014cc <SCH_Update+0x70>
                SCH_tasks_G[i].RunMe++;
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	491c      	ldr	r1, [pc, #112]	; (80014fc <SCH_Update+0xa0>)
 800148a:	011a      	lsls	r2, r3, #4
 800148c:	440a      	add	r2, r1
 800148e:	320c      	adds	r2, #12
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	3201      	adds	r2, #1
 8001494:	b2d1      	uxtb	r1, r2
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <SCH_Update+0xa0>)
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	330c      	adds	r3, #12
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
                if (SCH_tasks_G[i].Period) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <SCH_Update+0xa0>)
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	4413      	add	r3, r2
 80014aa:	3308      	adds	r3, #8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d018      	beq.n	80014e4 <SCH_Update+0x88>
                    SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4911      	ldr	r1, [pc, #68]	; (80014fc <SCH_Update+0xa0>)
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	440a      	add	r2, r1
 80014bc:	3208      	adds	r2, #8
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <SCH_Update+0xa0>)
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	440b      	add	r3, r1
 80014c6:	3304      	adds	r3, #4
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e00b      	b.n	80014e4 <SCH_Update+0x88>
                }
            } else {
                SCH_tasks_G[i].Delay--;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	490b      	ldr	r1, [pc, #44]	; (80014fc <SCH_Update+0xa0>)
 80014d0:	011a      	lsls	r2, r3, #4
 80014d2:	440a      	add	r2, r1
 80014d4:	3204      	adds	r2, #4
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	3a01      	subs	r2, #1
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <SCH_Update+0xa0>)
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3301      	adds	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d9bb      	bls.n	8001468 <SCH_Update+0xc>
            }
        }
    }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200000c8 	.word	0x200000c8

08001500 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	e02a      	b.n	8001562 <SCH_Dispatch_Tasks+0x62>
        if (SCH_tasks_G[i].RunMe > 0) {
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <SCH_Dispatch_Tasks+0x74>)
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	330c      	adds	r3, #12
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01f      	beq.n	800155c <SCH_Dispatch_Tasks+0x5c>
            (*SCH_tasks_G[i].pTask)();
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <SCH_Dispatch_Tasks+0x74>)
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4798      	blx	r3
            SCH_tasks_G[i].RunMe--;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4912      	ldr	r1, [pc, #72]	; (8001574 <SCH_Dispatch_Tasks+0x74>)
 800152c:	011a      	lsls	r2, r3, #4
 800152e:	440a      	add	r2, r1
 8001530:	320c      	adds	r2, #12
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	3a01      	subs	r2, #1
 8001536:	b2d1      	uxtb	r1, r2
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <SCH_Dispatch_Tasks+0x74>)
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	330c      	adds	r3, #12
 8001540:	460a      	mov	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
            if (SCH_tasks_G[i].Period == 0) {
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <SCH_Dispatch_Tasks+0x74>)
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	3308      	adds	r3, #8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <SCH_Dispatch_Tasks+0x5c>
                SCH_Delete_Task(i);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f850 	bl	80015fc <SCH_Delete_Task>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3301      	adds	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b09      	cmp	r3, #9
 8001566:	d9d1      	bls.n	800150c <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000c8 	.word	0x200000c8

08001578 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]
 8001588:	e02d      	b.n	80015e6 <SCH_Add_Task+0x6e>
        if (SCH_tasks_G[i].pTask == 0) {
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <SCH_Add_Task+0x80>)
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d123      	bne.n	80015e0 <SCH_Add_Task+0x68>
            SCH_tasks_G[i].pTask = pFunction;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <SCH_Add_Task+0x80>)
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].Delay = DELAY;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <SCH_Add_Task+0x80>)
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	3304      	adds	r3, #4
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].Period = PERIOD;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <SCH_Add_Task+0x80>)
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	3308      	adds	r3, #8
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].RunMe = (DELAY == 0) ? 1 : 0;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <SCH_Add_Task+0x80>)
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	330c      	adds	r3, #12
 80015d8:	460a      	mov	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
            return i;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	e006      	b.n	80015ee <SCH_Add_Task+0x76>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	3301      	adds	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d9ce      	bls.n	800158a <SCH_Add_Task+0x12>
        }
    }
    return SCH_MAX_TASKS;
 80015ec:	230a      	movs	r3, #10
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	200000c8 	.word	0x200000c8

080015fc <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID) {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    if (taskID < SCH_MAX_TASKS && SCH_tasks_G[taskID].pTask) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b09      	cmp	r3, #9
 8001608:	d823      	bhi.n	8001652 <SCH_Delete_Task+0x56>
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <SCH_Delete_Task+0x64>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01c      	beq.n	8001652 <SCH_Delete_Task+0x56>
        SCH_tasks_G[taskID].pTask = 0;
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <SCH_Delete_Task+0x64>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].Delay = 0;
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <SCH_Delete_Task+0x64>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].Period = 0;
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <SCH_Delete_Task+0x64>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	3308      	adds	r3, #8
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[taskID].RunMe = 0;
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <SCH_Delete_Task+0x64>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	330c      	adds	r3, #12
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
        return 0;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <SCH_Delete_Task+0x58>
    }
    return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200000c8 	.word	0x200000c8

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_MspInit+0x5c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_MspInit+0x60>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_MspInit+0x60>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d113      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201c      	movs	r0, #28
 80016f8:	f000 f9ab 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 f9c4 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 f889 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM2_IRQHandler+0x10>)
 8001766:	f000 ffe5 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000080 	.word	0x20000080

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <toggle_led>:


#include "tasks.h"


void toggle_led(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4802      	ldr	r0, [pc, #8]	; (8001790 <toggle_led+0x10>)
 8001788:	f000 fb43 	bl	8001e12 <HAL_GPIO_TogglePin>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010800 	.word	0x40010800

08001794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffee 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179a:	490c      	ldr	r1, [pc, #48]	; (80017cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b0:	4c09      	ldr	r4, [pc, #36]	; (80017d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f001 faf9 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c2:	f7ff fd11 	bl	80011e8 <main>
  bx lr
 80017c6:	4770      	bx	lr
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017d0:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 80017d4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017d8:	2000016c 	.word	0x2000016c

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x28>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f923 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff ff32 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f93b 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f903 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000010 	.word	0x20000010
 8001864:	20000018 	.word	0x20000018
 8001868:	20000014 	.word	0x20000014

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x20>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000018 	.word	0x20000018
 800188c:	20000168 	.word	0x20000168

08001890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000168 	.word	0x20000168

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4906      	ldr	r1, [pc, #24]	; (800193c <__NVIC_EnableIRQ+0x34>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff90 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff2d 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff42 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff35 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e148      	b.n	8001d66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8137 	bne.w	8001d60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4aa3      	ldr	r2, [pc, #652]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4aa1      	ldr	r2, [pc, #644]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4aa1      	ldr	r2, [pc, #644]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a9f      	ldr	r2, [pc, #636]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a9f      	ldr	r2, [pc, #636]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a9d      	ldr	r2, [pc, #628]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a9d      	ldr	r2, [pc, #628]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a9b      	ldr	r2, [pc, #620]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a9b      	ldr	r2, [pc, #620]	; (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a99      	ldr	r2, [pc, #612]	; (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a82      	ldr	r2, [pc, #520]	; (8001d98 <HAL_GPIO_Init+0x2d8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          break;
 8001bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8090 	beq.w	8001d60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x2e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0x1dc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_GPIO_Init+0x2ec>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_GPIO_Init+0x1d8>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e004      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb2:	493b      	ldr	r1, [pc, #236]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	492d      	ldr	r1, [pc, #180]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4929      	ldr	r1, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4923      	ldr	r1, [pc, #140]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	491f      	ldr	r1, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4919      	ldr	r1, [pc, #100]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4915      	ldr	r1, [pc, #84]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f aeaf 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	372c      	adds	r7, #44	; 0x2c
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e001      	b.n	8001dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df2:	787b      	ldrb	r3, [r7, #1]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df8:	887a      	ldrh	r2, [r7, #2]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	611a      	str	r2, [r3, #16]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e26c      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e64:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d112      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x12c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d168      	bne.n	8001f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e246      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x76>
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7f      	ldr	r2, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0xbc>
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fcb6 	bl	8001890 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fcb2 	bl	8001890 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1fa      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe4>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fca2 	bl	8001890 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fc9e 	bl	8001890 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1e6      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x10c>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1ba      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4939      	ldr	r1, [pc, #228]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fc57 	bl	8001890 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fc53 	bl	8001890 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e19b      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fc36 	bl	8001890 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff fc32 	bl	8001890 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e17a      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03a      	beq.n	80020c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d019      	beq.n	800208e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff fc16 	bl	8001890 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff fc12 	bl	8001890 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e15a      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002086:	2001      	movs	r0, #1
 8002088:	f000 fa9a 	bl	80025c0 <RCC_Delay>
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fbfc 	bl	8001890 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209a:	e00f      	b.n	80020bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fbf8 	bl	8001890 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e140      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	42420000 	.word	0x42420000
 80020b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e9      	bne.n	800209c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a6 	beq.w	8002222 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b97      	ldr	r3, [pc, #604]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b94      	ldr	r3, [pc, #592]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a93      	ldr	r2, [pc, #588]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b91      	ldr	r3, [pc, #580]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b8e      	ldr	r3, [pc, #568]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a8a      	ldr	r2, [pc, #552]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7ff fbb9 	bl	8001890 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7ff fbb5 	bl	8001890 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0fd      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x312>
 8002148:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a7a      	ldr	r2, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e02d      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x334>
 800215e:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a75      	ldr	r2, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a72      	ldr	r2, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	e01c      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x356>
 8002180:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a6c      	ldr	r2, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a69      	ldr	r2, [pc, #420]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b64      	ldr	r3, [pc, #400]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb69 	bl	8001890 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff fb65 	bl	8001890 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ab      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <HAL_RCC_OscConfig+0x37e>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb53 	bl	8001890 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff fb4f 	bl	8001890 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e095      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b48      	ldr	r3, [pc, #288]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8081 	beq.w	800232e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222c:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d061      	beq.n	80022fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d146      	bne.n	80022ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fb23 	bl	8001890 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff fb1f 	bl	8001890 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e067      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d108      	bne.n	8002288 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	492d      	ldr	r1, [pc, #180]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a19      	ldr	r1, [r3, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	430b      	orrs	r3, r1
 800229a:	4927      	ldr	r1, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff faf3 	bl	8001890 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff faef 	bl	8001890 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e037      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x46a>
 80022cc:	e02f      	b.n	800232e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fadc 	bl	8001890 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff fad8 	bl	8001890 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x498>
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	42420060 	.word	0x42420060

08002344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d0      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4965      	ldr	r1, [pc, #404]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d040      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e073      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06b      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4936      	ldr	r1, [pc, #216]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff fa2c 	bl	8001890 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff fa28 	bl	8001890 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e053      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d210      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4922      	ldr	r1, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f821 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f98a 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	08002e24 	.word	0x08002e24
 8002510:	20000010 	.word	0x20000010
 8002514:	20000014 	.word	0x20000014

08002518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x30>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x36>
 8002546:	e027      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	e027      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	fb02 f203 	mul.w	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	613b      	str	r3, [r7, #16]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	693b      	ldr	r3, [r7, #16]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08002e34 	.word	0x08002e34
 80025b8:	08002e44 	.word	0x08002e44
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <RCC_Delay+0x34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <RCC_Delay+0x38>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025dc:	bf00      	nop
  }
  while (Delay --);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	60fa      	str	r2, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <RCC_Delay+0x1c>
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000010 	.word	0x20000010
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff f850 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fa56 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e035      	b.n	8002720 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_TIM_Base_Start_IT+0x90>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d004      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_TIM_Base_Start_IT+0x94>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d010      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	e007      	b.n	800271e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0202 	mvn.w	r2, #2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f998 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f98b 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f99a 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f972 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f965 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f974 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f94c 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f93f 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f94e 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f926 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f919 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f928 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fdce 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa6f 	bl	8002da2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8f8 	bl	8002ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0220 	mvn.w	r2, #32
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa42 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b4      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd4>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	f000 8086 	beq.w	8002a86 <HAL_TIM_ConfigClockSource+0x172>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>
 8002984:	2b70      	cmp	r3, #112	; 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x11a>
 800298c:	2b60      	cmp	r3, #96	; 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xfa>
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x13a>
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b30      	cmp	r3, #48	; 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f000 f96a 	bl	8002ca2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04f      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f000 f953 	bl	8002ca2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f8ca 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	; 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f921 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f8e8 	bl	8002c10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f911 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f8aa 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f901 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 f8f8 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
	...

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <TIM_Base_SetConfig+0xc4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a20      	ldr	r2, [pc, #128]	; (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <TIM_Base_SetConfig+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 030a 	bic.w	r3, r3, #10
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0210 	bic.w	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	031b      	lsls	r3, r3, #12
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	621a      	str	r2, [r3, #32]
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f043 0307 	orr.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b087      	sub	sp, #28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e041      	b.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d004      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10c      	bne.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	2600      	movs	r6, #0
 8002db8:	4d0c      	ldr	r5, [pc, #48]	; (8002dec <__libc_init_array+0x38>)
 8002dba:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	f000 f822 	bl	8002e0c <_init>
 8002dc8:	2600      	movs	r6, #0
 8002dca:	4d0a      	ldr	r5, [pc, #40]	; (8002df4 <__libc_init_array+0x40>)
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <__libc_init_array+0x44>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08002e48 	.word	0x08002e48
 8002df0:	08002e48 	.word	0x08002e48
 8002df4:	08002e48 	.word	0x08002e48
 8002df8:	08002e4c 	.word	0x08002e4c

08002dfc <memset>:
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4402      	add	r2, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
